{"version":3,"sources":["types.ts","constants.ts","utils/cells.ts","utils/mixins.ts","components/Button/style.ts","components/Button/index.tsx","components/Board/style.ts","components/Board/index.tsx","components/Face/style.ts","components/Face/index.tsx","components/NumberDisplay/style.ts","components/NumberDisplay/index.tsx","components/Header/style.ts","components/Header/index.tsx","components/Game/style.ts","components/Game/index.tsx","components/Game/functions.ts","App.tsx","index.tsx"],"names":["CellValue","CellState","FaceState","grabAllAdjacentCells","cells","rowParam","colParam","topLeftCell","topCell","topRightCell","MAX_COLUMNS","leftCell","rightCell","bottomLeftCell","MAX_ROWS","bottomCell","bottomRightCell","generateCells","row","push","col","value","none","state","open","bombsPlaced","randomRow","Math","floor","random","randomCol","bomb","map","rowIndex","cell","colIndex","currentCell","numberOfBombs","openMultipleCells","newCells","slice","visible","border","leftTop","rightBottom","css","ButtonContainer","styled","div","props","one","two","three","four","Button","onClick","onContext","onMouseDown","onMouseUp","onContextMenu","role","flagged","BoardContainer","Board","handleClick","handleRightClick","handleMouseDown","handleMouseUp","FaceContainer","Face","face","handleFaceClick","DisplayContainer","NumberDisplay","toString","padStart","HeaderContainer","Header","time","bombCounter","GameContainer","Game","useState","setCells","smile","setFace","setTime","playing","setPlaying","setBombCounter","useEffect","timer","setInterval","clearInterval","lost","showAllBombs","safeOpenCellExists","won","e","preventDefault","currentBombCounter","setCellFlagged","newBombCounter","oh","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa0183e2.chunk.js","sourcesContent":["export enum CellValue {\n  none,\n  one,\n  two,\n  three,\n  four,\n  five,\n  six,\n  seven,\n  eight,\n  bomb\n}\n\nexport enum CellState {\n  open,\n  visible,\n  flagged\n}\n\nexport type Cell = { value: CellValue; state: CellState };\n\nexport enum FaceState {\n  smile = '😃',\n  oh = '😮',\n  lost = '😵',\n  won = '😎'\n}","export const MAX_ROWS = 9;\nexport const MAX_COLUMNS = 9;\nexport const NO_OF_BOMBS = 10;\n","import { MAX_COLUMNS, MAX_ROWS, NO_OF_BOMBS } from \"../constants\";\nimport { Cell, CellState, CellValue } from \"../types\";\n\nconst grabAllAdjacentCells = (\n  cells: Cell[][],\n  rowParam: number,\n  colParam: number\n): {\n  topLeftCell: Cell | null,\n  topCell: Cell | null,\n  topRightCell: Cell | null,\n  leftCell: Cell | null,\n  rightCell: Cell | null,\n  bottomLeftCell: Cell | null,\n  bottomCell: Cell | null,\n  bottomRightCell: Cell | null\n} => {\n  const topLeftCell = rowParam > 0 && colParam > 0 ? cells[rowParam - 1][colParam - 1] : null;\n  const topCell = rowParam > 0 ? cells[rowParam - 1][colParam] : null;\n  const topRightCell = rowParam > 0 && colParam < MAX_COLUMNS - 1 ? cells[rowParam - 1][colParam + 1] : null;\n  const leftCell = colParam > 0 ? cells[rowParam][colParam - 1] : null;\n  const rightCell = colParam < MAX_COLUMNS - 1 ? cells[rowParam][colParam + 1] : null;\n  const bottomLeftCell = rowParam < MAX_ROWS - 1 && colParam > 0 ? cells[rowParam + 1][colParam - 1] : null;\n  const bottomCell = rowParam < MAX_ROWS - 1 ? cells[rowParam + 1][colParam] : null;\n  const bottomRightCell = rowParam < MAX_ROWS - 1 && colParam < MAX_COLUMNS - 1 ? cells[rowParam + 1][colParam + 1] : null;\n\n  return {\n    topLeftCell,\n    topCell,\n    topRightCell,\n    leftCell,\n    rightCell,\n    bottomLeftCell,\n    bottomCell,\n    bottomRightCell\n  }\n}\n\nexport const generateCells = (): Cell[][] => {\n  let cells: Cell[][] = [];\n\n  // generating all cells\n  for (let row = 0; row < MAX_ROWS; row++) {\n    cells.push([]);\n    for (let col = 0; col < MAX_COLUMNS; col++) {\n      cells[row].push({\n        value: CellValue.none,\n        state: CellState.open\n        // state: CellState.visible // TODO: set to open after test\n      });\n    }\n  }\n\n  // randomly put 10 bombs\n  let bombsPlaced = 0;\n  while (bombsPlaced < NO_OF_BOMBS) {\n    const randomRow = Math.floor(Math.random() * MAX_ROWS);\n    const randomCol = Math.floor(Math.random() * MAX_COLUMNS);\n\n    const currentCell = cells[randomRow][randomCol];\n    if (currentCell.value !== CellValue.bomb) {\n      cells = cells.map((row, rowIndex) => {\n        return row.map((cell, colIndex) => {\n          // If we are in the selected random cell\n          if (randomRow === rowIndex && randomCol === colIndex) {\n            // Set it as a Bomb Cell\n            return {\n              ...cell,\n              value: CellValue.bomb\n            };\n          }\n\n          // Otherwise just return his current value and state\n          return cell;\n        }); // cell\n      }); // row\n      bombsPlaced++;\n    } // if\n  }\n\n  // calculate the numbers for each cell\n  for (let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\n    for (let colIndex = 0; colIndex < MAX_COLUMNS; colIndex++) {\n      const currentCell = cells[rowIndex][colIndex];\n      // If this cell is a bomb\n      if (currentCell.value === CellValue.bomb) {\n        // Skip this cell\n        continue;\n      }\n\n      let numberOfBombs = 0;\n      const {\n        topLeftCell,\n        topCell,\n        topRightCell,\n        leftCell,\n        rightCell,\n        bottomLeftCell,\n        bottomCell,\n        bottomRightCell\n      } = grabAllAdjacentCells(cells, rowIndex, colIndex);\n\n      if (topLeftCell?.value === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if (topCell?.value === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if (topRightCell?.value === CellValue.bomb) {\n        numberOfBombs++;\n      }\n\n      if (leftCell?.value === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if (rightCell?.value === CellValue.bomb) {\n        numberOfBombs++;\n      }\n\n      if (bottomLeftCell?.value === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if (bottomCell?.value === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if (bottomRightCell?.value === CellValue.bomb) {\n        numberOfBombs++;\n      }\n\n      if (numberOfBombs > 0) {\n        cells[rowIndex][colIndex] = {\n          ...currentCell,\n          value: numberOfBombs\n        }\n      }\n    }\n  }\n\n  return cells;\n}\n\nexport const openMultipleCells = (\n  cells: Cell[][],\n  rowParam: number,\n  colParam: number\n): Cell[][] => {\n  let newCells = cells.slice();\n\n  newCells[rowParam][colParam].state = CellState.visible;\n\n  const {\n    topLeftCell,\n    topCell,\n    topRightCell,\n    leftCell,\n    rightCell,\n    bottomLeftCell,\n    bottomCell,\n    bottomRightCell\n  } = grabAllAdjacentCells(cells, rowParam, colParam);\n\n  // God has abandoned us...\n  if (\n    topLeftCell?.state === CellState.open\n    && topLeftCell.value !== CellValue.bomb\n  ) {\n    if (topLeftCell.value === CellValue.none) {\n      newCells = openMultipleCells(newCells, rowParam - 1, colParam - 1);\n    } else {\n      newCells[rowParam - 1][colParam - 1].state = CellState.visible;\n    }\n  }\n\n  if (\n    topCell?.state === CellState.open\n    && topCell.value !== CellValue.bomb\n  ) {\n    if (topCell.value === CellValue.none) {\n      newCells = openMultipleCells(newCells, rowParam - 1, colParam);\n    } else {\n      newCells[rowParam - 1][colParam].state = CellState.visible;\n    }\n  }\n\n  if (\n    topRightCell?.state === CellState.open\n    && topRightCell.value !== CellValue.bomb\n  ) {\n    if (topRightCell.value === CellValue.none) {\n      newCells = openMultipleCells(newCells, rowParam - 1, colParam + 1);\n    } else {\n      newCells[rowParam - 1][colParam + 1].state = CellState.visible;\n    }\n  }\n\n  if (\n    leftCell?.state === CellState.open\n    && leftCell.value !== CellValue.bomb\n  ) {\n    if (leftCell.value === CellValue.none) {\n      newCells = openMultipleCells(newCells, rowParam, colParam - 1);\n    } else {\n      newCells[rowParam][colParam - 1].state = CellState.visible;\n    }\n  }\n\n  if (\n    rightCell?.state === CellState.open\n    && rightCell.value !== CellValue.bomb\n  ) {\n    if (rightCell.value === CellValue.none) {\n      newCells = openMultipleCells(newCells, rowParam, colParam + 1);\n    } else {\n      newCells[rowParam][colParam + 1].state = CellState.visible;\n    }\n  }\n\n  if (\n    bottomLeftCell?.state === CellState.open\n    && bottomLeftCell.value !== CellValue.bomb\n  ) {\n    if (bottomLeftCell.value === CellValue.none) {\n      newCells = openMultipleCells(newCells, rowParam + 1, colParam - 1);\n    } else {\n      newCells[rowParam + 1][colParam - 1].state = CellState.visible;\n    }\n  }\n\n  if (\n    bottomCell?.state === CellState.open\n    && bottomCell.value !== CellValue.bomb\n  ) {\n    if (bottomCell.value === CellValue.none) {\n      newCells = openMultipleCells(newCells, rowParam + 1, colParam);\n    } else {\n      newCells[rowParam + 1][colParam].state = CellState.visible;\n    }\n  }\n\n  if (\n    bottomRightCell?.state === CellState.open\n    && bottomRightCell.value !== CellValue.bomb\n  ) {\n    if (bottomRightCell.value === CellValue.none) {\n      newCells = openMultipleCells(newCells, rowParam + 1, colParam + 1);\n    } else {\n      newCells[rowParam + 1][colParam + 1].state = CellState.visible;\n    }\n  }\n\n  return newCells;\n}\n\nexport const showAllBombs = (cells: Cell[][]): Cell[][] => {\n  const currentCells = cells.slice();\n  return currentCells.map(row => {\n    return row.map(cell => {\n\n      if (cell.value === CellValue.bomb) {\n        return {\n          ...cell,\n          state: CellState.visible\n        };\n      }\n\n      return cell;\n\n    });\n  });\n}","import { css } from \"styled-components\";\n\nexport const border = (leftTop: string, rightBottom: string) => css`\n  border-width: 4px;\n  border-style: solid;\n  border-right-color: ${rightBottom};\n  border-bottom-color: ${rightBottom};\n  border-left-color: ${leftTop};\n  border-top-color: ${leftTop};\n`;","import styled from \"styled-components\";\nimport { CellState, CellValue } from \"../../types\";\nimport { border } from \"../../utils/mixins\";\n\ninterface ContainerProps {\n  state: CellState;\n  value: CellValue | string;\n}\n\nexport const ButtonContainer = styled.div<ContainerProps>`\n  ${border('#fff', '#999')};\n\n  width: 30px;\n  height: 30px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  ${props => props.state === CellState.visible ?\n    'border-color: #7b7b7b; border-width: 1px;' : ''}\n  \n  ${props => props.value === CellValue.one ?\n    'color: blue;' : ''}\n  ${props => props.value === CellValue.two ?\n    'color: green;' : ''}\n  ${props => props.value === CellValue.three ?\n    'color: red;' : ''}\n  ${props => props.value === CellValue.four ?\n    'color: purple;' : ''}\n\n  &:active {\n    ${border('#999', '#fff')};\n  }\n\n  span{\n    font-size: 16px;\n  }\n`;","import React, { FC } from \"react\";\nimport { CellState, CellValue } from \"../../types\";\nimport { ButtonContainer } from \"./style\";\n\ninterface ButtonProps {\n  row: number;\n  col: number;\n  state: CellState;\n  value: CellValue;\n  onClick(\n    rowParam: number,\n    colParam: number\n  ): (e: React.MouseEvent) => void;\n  onContext(\n    rowParam: number,\n    colParam: number\n  ): (e: React.MouseEvent) => void;\n  onMouseDown: () => void;\n  onMouseUp: () => void;\n}\n\nconst Button: FC<ButtonProps> = ({\n  row,\n  col,\n  onClick,\n  onContext,\n  state,\n  value,\n  onMouseDown,\n  onMouseUp\n}) => {\n  const renderContent = (): React.ReactNode => {\n    if (state === CellState.visible) {\n      if (value === CellValue.bomb) {\n        return (\n          <span role=\"img\" aria-label=\"bomb\" >\n            💣\n          </span>)\n      }\n\n      return value !== 0 ? value : \"\";\n    } else if (state === CellState.flagged) {\n      return (\n        <span role=\"img\" aria-label=\"flag\" >\n          🚩\n        </span>)\n    }\n  }\n\n  return (\n    <ButtonContainer\n      state={state}\n      value={value}\n      onClick={onClick(row, col)}\n      onContextMenu={onContext(row, col)}\n      onMouseDown={onMouseDown}\n      onMouseUp={onMouseUp}\n    >\n      {renderContent()}\n    </ButtonContainer>\n  );\n}\n\nexport default Button;","import styled from \"styled-components\";\nimport { border } from \"../../utils/mixins\";\n\nexport const BoardContainer = styled.div`\n  margin-top: 16px;\n  ${border('#999', '#fff')};\n\n  display: grid;\n  grid-template-rows: repeat(9, 1fr);\n  grid-template-columns: repeat(9, 1fr);\n`;","import React, { FC } from \"react\";\nimport { Cell } from \"../../types\";\nimport Button from \"../Button\";\nimport { BoardContainer } from \"./style\";\n\ninterface BoardProps {\n  cells: Cell[][];\n  handleClick(\n    rowParam: number,\n    colParam: number\n  ): (e: React.MouseEvent) => void;\n  handleRightClick(\n    rowParam: number,\n    colParam: number\n  ): (e: React.MouseEvent) => void;\n  handleMouseDown: () => void;\n  handleMouseUp: () => void;\n}\n\nconst Board: FC<BoardProps> = ({\n  cells,\n  handleClick,\n  handleRightClick,\n  handleMouseDown,\n  handleMouseUp\n}) => {\n  const renderCells = (): React.ReactNode => {\n    return cells.map((row, rowIndex) =>\n      row.map((cell, colIndex) =>\n        <Button\n          key={`${rowIndex}-${colIndex}`}\n          row={rowIndex}\n          col={colIndex}\n          onClick={handleClick}\n          state={cell.state}\n          value={cell.value}\n          onContext={handleRightClick}\n          onMouseDown={handleMouseDown}\n          onMouseUp={handleMouseUp}\n        />)\n    );\n  };\n\n  return (\n    <BoardContainer>\n      {\n        renderCells()\n      }\n    </BoardContainer>\n  );\n}\n\nexport default Board;","import styled from \"styled-components\";\nimport { border } from \"../../utils/mixins\";\n\nexport const FaceContainer = styled.div`\n  ${border('#fff', '#999')};\n\n  font-size: 32px;\n  width: 52px;\n  height: 52px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  &:active {\n    ${border('#999', '#fff')};\n  }\n`;","import { FC } from \"react\";\nimport { FaceState } from \"../../types\";\nimport { FaceContainer } from \"./style\";\n\ninterface FaceProps {\n  face: FaceState,\n  handleFaceClick: () => void\n}\n\nconst Face: FC<FaceProps> = ({ face, handleFaceClick }) => {\n  return (\n    <FaceContainer onClick={handleFaceClick}>\n      {face}\n    </FaceContainer>\n  );\n}\n\nexport default Face;","import styled from \"styled-components\";\n\nexport const DisplayContainer = styled.div`\n  width: 80px;\n  color: #ff0701;\n  background: #000;\n  text-align: center;\n  font-size: 40px;\n`;","import React from 'react';\nimport { DisplayContainer } from \"./style\";\n\ninterface NumberDisplayProps {\n  value: number;\n}\n\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({ value }) => {\n  return (\n    <DisplayContainer>\n      {value.toString().padStart(3, '0')}\n    </DisplayContainer>\n  );\n}\n\nexport default NumberDisplay;","import styled from \"styled-components\";\nimport { border } from \"../../utils/mixins\";\n\nexport const HeaderContainer = styled.div`\n  background: #c0c0c0;\n  padding: 10px 12px;\n  ${border('#7b7b7b', '#fff')};\n\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n`;","import { FC } from 'react';\nimport { FaceState } from '../../types';\nimport Face from '../Face';\nimport NumberDisplay from '../NumberDisplay';\nimport { HeaderContainer } from './style';\n\ninterface HeaderProps {\n  face: FaceState,\n  time: number,\n  bombCounter: number,\n  handleFaceClick: () => void\n}\n\nconst Header: FC<HeaderProps> = ({ face, time, bombCounter, handleFaceClick }) => {\n  return (\n    <HeaderContainer>\n      <NumberDisplay value={bombCounter} />\n      <Face face={face} handleFaceClick={handleFaceClick} />\n      <NumberDisplay value={time} />\n    </HeaderContainer>\n  );\n}\n\nexport default Header;","import styled from \"styled-components\";\nimport { border } from \"../../utils/mixins\";\n\nexport const GameContainer = styled.div`\n  background: #c2c2c2;\n  padding: 16px;\n  ${border('#fff', '#999')};\n`;","import React, { useEffect, useState } from 'react';\nimport { Cell, CellState, CellValue, FaceState } from '../../types';\nimport { generateCells, openMultipleCells, showAllBombs } from '../../utils/cells';\nimport Board from '../Board';\nimport Header from '../Header';\nimport { safeOpenCellExists, setCellFlagged } from './functions';\nimport { GameContainer } from './style';\n\nconst Game = () => {\n  const [cells, setCells] = useState<Cell[][]>(generateCells());\n  const [face, setFace] = useState<FaceState>(FaceState.smile);\n  const [time, setTime] = useState<number>(0);\n  const [playing, setPlaying] = useState<boolean>(false);\n  const [bombCounter, setBombCounter] = useState<number>(10);\n\n  // Time Counter loop\n  useEffect(() => {\n    if (playing && time < 999) {\n      const timer = setInterval(() => {\n        setTime(time + 1);\n      }, 1000);\n\n      return () => {\n        clearInterval(timer);\n      }\n    }\n  }, [playing, time]);\n\n  const handleCellClick = (\n    rowParam: number,\n    colParam: number\n  ) => (): void => {\n    // start the game\n    if (!playing) {\n      setPlaying(true);\n    }\n\n    const currentCell = cells[rowParam][colParam];\n    let newCells = cells.slice();\n\n    if (currentCell.state === CellState.flagged || currentCell.state === CellState.visible) {\n      return;\n    }\n\n    if (currentCell.value === CellValue.bomb) {\n      setFace(FaceState.lost);\n      setPlaying(false);\n      newCells = showAllBombs(newCells);\n      setCells(newCells);\n      return;\n\n    } else if (currentCell.value === CellValue.none) {\n      newCells = openMultipleCells(newCells, rowParam, colParam);\n    } else {\n      newCells[rowParam][colParam].state = CellState.visible;\n    }\n\n    if (!safeOpenCellExists(newCells)) {\n      newCells = newCells.map(row => row.map(cell => {\n        if (cell.value === CellValue.bomb) {\n          return {\n            ...cell,\n            state: CellState.flagged\n          }\n        }\n        return cell;\n      }));\n      setBombCounter(0);\n      setPlaying(false);\n      setFace(FaceState.won);\n    }\n\n    setCells(newCells);\n  }\n\n  const handleCellRightClick = (\n    rowParam: number,\n    colParam: number\n  ) => (e: React.MouseEvent): void => {\n    e.preventDefault();\n\n    if (!playing) {\n      return;\n    }\n\n    const [newCells, newBombCounter] = setCellFlagged(cells, rowParam, colParam, bombCounter);\n\n    setCells(newCells);\n    setBombCounter(newBombCounter);\n  }\n\n  // Reset Button\n  const handleFaceClick = (): void => {\n    setPlaying(false);\n    setTime(0);\n    setCells(generateCells());\n    setBombCounter(10);\n    setFace(FaceState.smile);\n  }\n\n  return (\n    <GameContainer>\n      <Header\n        face={face}\n        time={time}\n        handleFaceClick={handleFaceClick}\n        bombCounter={bombCounter}\n      />\n      <Board\n        cells={cells}\n        handleClick={handleCellClick}\n        handleRightClick={handleCellRightClick}\n        handleMouseDown={() => { setFace(FaceState.oh); }}\n        handleMouseUp={() => { setFace(FaceState.smile); }}\n      />\n    </GameContainer>\n  );\n}\n\nexport default Game;","import { MAX_COLUMNS, MAX_ROWS } from \"../../constants\";\nimport { Cell, CellState, CellValue } from \"../../types\";\n\nexport const setCellFlagged = (\n  cells: Cell[][],\n  rowParam: number,\n  colParam: number,\n  currentBombCounter: number\n): [Cell[][], number] => {\n  const newCells = cells.slice();\n  const currentCell = cells[rowParam][colParam];\n  let bombCounter = currentBombCounter;\n\n  if (currentCell.state === CellState.visible) {\n    return [newCells, bombCounter];\n  } else if (currentCell.state === CellState.open && bombCounter > 0) {\n    newCells[rowParam][colParam].state = CellState.flagged;\n    bombCounter = bombCounter - 1;\n  } else if (currentCell.state === CellState.flagged && bombCounter < 10) {\n    newCells[rowParam][colParam].state = CellState.open;\n    bombCounter = bombCounter + 1;\n  }\n\n  return [newCells, bombCounter];\n}\n\n// Check to see if you have won\nexport const safeOpenCellExists = (cells: Cell[][]): boolean => {\n  for (let row = 0; row < MAX_ROWS; row++) {\n    for (let col = 0; col < MAX_COLUMNS; col++) {\n      const currentCell = cells[row][col];\n\n      if (\n        currentCell.value !== CellValue.bomb &&\n        currentCell.state === CellState.open\n      ) {\n        return true;\n      }\n    }\n  } // For\n  return false;\n}","import Game from './components/Game';\n\nconst App = () => {\n  return <Game />\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}